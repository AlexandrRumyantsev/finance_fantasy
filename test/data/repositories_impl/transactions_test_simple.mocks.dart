// Mocks generated by Mockito 5.4.6 from annotations
// in finance_fantasy/test/data/repositories_impl/transactions_test_simple.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:finance_fantasy/data/data_source/rest/api_service_interface.dart'
    as _i7;
import 'package:finance_fantasy/data/models/request/account_create_request.dart'
    as _i9;
import 'package:finance_fantasy/data/models/request/account_update_request.dart'
    as _i10;
import 'package:finance_fantasy/data/models/request/transaction_request.dart'
    as _i11;
import 'package:finance_fantasy/data/models/response/account_history_response.dart'
    as _i4;
import 'package:finance_fantasy/data/models/response/account_response.dart'
    as _i3;
import 'package:finance_fantasy/data/models/response/transaction_response.dart'
    as _i6;
import 'package:finance_fantasy/data/models/shared/account.dart' as _i2;
import 'package:finance_fantasy/data/models/shared/category.dart' as _i12;
import 'package:finance_fantasy/data/models/shared/transaction.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAccountDto_0 extends _i1.SmartFake implements _i2.AccountDto {
  _FakeAccountDto_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccountResponse_1 extends _i1.SmartFake
    implements _i3.AccountResponse {
  _FakeAccountResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccountHistoryResponse_2 extends _i1.SmartFake
    implements _i4.AccountHistoryResponse {
  _FakeAccountHistoryResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionDto_3 extends _i1.SmartFake
    implements _i5.TransactionDto {
  _FakeTransactionDto_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionResponse_4 extends _i1.SmartFake
    implements _i6.TransactionResponse {
  _FakeTransactionResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i7.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i2.AccountDto>> getAccounts() => (super.noSuchMethod(
        Invocation.method(
          #getAccounts,
          [],
        ),
        returnValue: _i8.Future<List<_i2.AccountDto>>.value(<_i2.AccountDto>[]),
      ) as _i8.Future<List<_i2.AccountDto>>);

  @override
  _i8.Future<_i2.AccountDto> createAccount(_i9.AccountCreateRequest? account) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [account],
        ),
        returnValue: _i8.Future<_i2.AccountDto>.value(_FakeAccountDto_0(
          this,
          Invocation.method(
            #createAccount,
            [account],
          ),
        )),
      ) as _i8.Future<_i2.AccountDto>);

  @override
  _i8.Future<void> deleteAccount(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAccount,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i2.AccountDto> updateAccount(
    int? id,
    _i10.AccountUpdateRequest? account,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAccount,
          [
            id,
            account,
          ],
        ),
        returnValue: _i8.Future<_i2.AccountDto>.value(_FakeAccountDto_0(
          this,
          Invocation.method(
            #updateAccount,
            [
              id,
              account,
            ],
          ),
        )),
      ) as _i8.Future<_i2.AccountDto>);

  @override
  _i8.Future<_i3.AccountResponse> getAccountById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAccountById,
          [id],
        ),
        returnValue:
            _i8.Future<_i3.AccountResponse>.value(_FakeAccountResponse_1(
          this,
          Invocation.method(
            #getAccountById,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.AccountResponse>);

  @override
  _i8.Future<_i4.AccountHistoryResponse> getAccountHistory(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAccountHistory,
          [id],
        ),
        returnValue: _i8.Future<_i4.AccountHistoryResponse>.value(
            _FakeAccountHistoryResponse_2(
          this,
          Invocation.method(
            #getAccountHistory,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.AccountHistoryResponse>);

  @override
  _i8.Future<_i5.TransactionDto> createTransaction(
          _i11.TransactionRequest? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTransaction,
          [transaction],
        ),
        returnValue: _i8.Future<_i5.TransactionDto>.value(_FakeTransactionDto_3(
          this,
          Invocation.method(
            #createTransaction,
            [transaction],
          ),
        )),
      ) as _i8.Future<_i5.TransactionDto>);

  @override
  _i8.Future<_i6.TransactionResponse> getTransactionById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionById,
          [id],
        ),
        returnValue: _i8.Future<_i6.TransactionResponse>.value(
            _FakeTransactionResponse_4(
          this,
          Invocation.method(
            #getTransactionById,
            [id],
          ),
        )),
      ) as _i8.Future<_i6.TransactionResponse>);

  @override
  _i8.Future<_i6.TransactionResponse> updateTransaction(
    int? id,
    _i11.TransactionRequest? transaction,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTransaction,
          [
            id,
            transaction,
          ],
        ),
        returnValue: _i8.Future<_i6.TransactionResponse>.value(
            _FakeTransactionResponse_4(
          this,
          Invocation.method(
            #updateTransaction,
            [
              id,
              transaction,
            ],
          ),
        )),
      ) as _i8.Future<_i6.TransactionResponse>);

  @override
  _i8.Future<void> deleteTransaction(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i6.TransactionResponse>> getTransactionsByPeriod(
    int? accountId,
    String? from,
    String? to,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionsByPeriod,
          [
            accountId,
            from,
            to,
          ],
        ),
        returnValue: _i8.Future<List<_i6.TransactionResponse>>.value(
            <_i6.TransactionResponse>[]),
      ) as _i8.Future<List<_i6.TransactionResponse>>);

  @override
  _i8.Future<List<_i12.CategoryDto>> getCategories() => (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue:
            _i8.Future<List<_i12.CategoryDto>>.value(<_i12.CategoryDto>[]),
      ) as _i8.Future<List<_i12.CategoryDto>>);

  @override
  _i8.Future<List<_i12.CategoryDto>> getCategoriesByType(bool? isIncome) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoriesByType,
          [isIncome],
        ),
        returnValue:
            _i8.Future<List<_i12.CategoryDto>>.value(<_i12.CategoryDto>[]),
      ) as _i8.Future<List<_i12.CategoryDto>>);
}
